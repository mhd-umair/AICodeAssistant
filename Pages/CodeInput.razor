@page "/codeinput"
@using AICodeAssistant.Models
@using AICodeAssistant.Options
@using Microsoft.Extensions.Options
@inject HttpClient Http
@inject IOptions<AppSettings> settings
<EditForm Model="codeInputModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="code">Code:</label>
        <InputTextArea id="code" class="form-control" @bind-Value="codeInputModel.Code" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (!string.IsNullOrEmpty(suggestion))
{
    <div class="mt-3">
        <h4>Code Suggestion:</h4>
        <pre>@suggestion</pre>
    </div>
}

@code {
    private CodeInputModel codeInputModel = new CodeInputModel();
    private string suggestion;

    private async Task HandleValidSubmit()
    {
        try
        {
            Http.BaseAddress = new Uri(settings.Value.SystemUri);

            // Fetch the anti-forgery token
            var tokenResponse = await Http.GetFromJsonAsync<AntiforgeryTokenResponse>("api/antiforgery/token");
            var token = tokenResponse?.Token;

            // Include the anti-forgery token in the request headers
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Add("X-CSRF-TOKEN", token);
            }

            var response = await Http.PostAsJsonAsync("api/codeassistant", codeInputModel);
            if (response.IsSuccessStatusCode)
            {
                suggestion = await response.Content.ReadAsStringAsync();
            }
            else
            {
                suggestion = "Error fetching suggestion";
            }
        }
        catch (Exception ex)
        {
            suggestion = $"Error: {ex.Message}";
        }
    }

    

    private class AntiforgeryTokenResponse
    {
        public string Token { get; set; }
    }
}
